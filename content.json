{"meta":{"title":"不平庸的会一直不断挑战自己！","subtitle":null,"description":null,"author":"padakill","url":"http://blog.padakill.com"},"pages":[{"title":"tags","date":"2017-09-20T13:33:38.000Z","updated":"2017-09-20T13:33:38.000Z","comments":true,"path":"tags/index.html","permalink":"http://blog.padakill.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-09-20T13:34:21.000Z","updated":"2017-09-20T13:34:21.000Z","comments":true,"path":"categories/index.html","permalink":"http://blog.padakill.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Android开发规范","slug":"Android开发规范","date":"2017-09-20T14:36:14.000Z","updated":"2017-09-20T15:19:29.000Z","comments":true,"path":"2017/09/20/Android开发规范/","link":"","permalink":"http://blog.padakill.com/2017/09/20/Android开发规范/","excerpt":"","text":"项目包名命名规范包名取得好的作用应用包名主要用于存放各类文件，如果包名命名的好，可以方便程序员在开发的过程中更有效的找到对应的代码相关文件，减轻许多的工作量，项目能够按文件功能将各类文件妥善存放，相信也能为程序员带来愉悦的开发心情。 包名在xian的应用在自有的android项目中，包名是按两种规则来存放文件和为各类包命名的。 第一种结构：首先命名的第一个维度是功能，第二个维度是模块。首先功能为先，最后才是以模块来命名包名。如图1截图所示 第二种结构：其实包名的结构，实践之后，发现第一维度使用模块，第二维度是功能的包名似乎能够更好，建立一个公共的包，存放公共的工具、dataCenter等，模块的包名与dataCenter同级，如果项目一旦壮大的话，第一种包名结构会出现明显的短板。如图2截图所示 例如在两种不同结构的包名在项目中的应用，app的包截图如下： 图1 第一种结构 图2 第一种结构 同样是采用了MVP的框架，但是在项目壮大的时候，图1中的结构在下拉查看的时候，会出现明显的缺点，就是presenter、view、ui三个文件夹的子文件夹数量太多，在你需要寻找文件的时候很麻烦，会经常跳来跳去。而图1显示的第二种报名结构，相对来说会好一点，例如login模块的presenter、view、ui都放在了login文件夹当中，在调试和debug迭代的时候就很方便可以找到login这一模块的相关文件和类 命名的规范包名一般要求小写包名一般要求小写，并且尽量不出现下划线等字符，值得注意的是，需要用英文来命名而不是中文。例如views，widget 包名要求言简意赅一般是功能、模块的简写，能够让包名能够一目了然，知道这个包里面放的是什么文件。例如ui、activity等 java文件命名规范驼峰式命名java类的命名首字母要求大写，采取驼峰式命名，并且要求以MLY开头；同时要求对类进行注释！！！！！例如： 12345678/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午10:15 * 描述: 此类封装了关于APP城市相关的数据读取与缓存，使用缓存+服务器获取数据的策略 */public class PDCityDataCenter &#123; private static final String TAG = MLYCityDataCenter.class.getSimpleName();&#125; 言简意赅java类的命名要尽量一目了然，闻其名而知其意；例如： 1234567/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午11:15 * 描述: 订单状态页面 */public class PDOrderStatusActivity extends BaseAppCompatActivity &#123;&#125; 接口文件的命名如果是一般的接口（interface）文件，则命名为Ixxx.java，例如： 1234567/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午11:15 * 描述: mvp的view基类，所有的views都继承该类 */public inteface IMVPView &#123;&#125; 1234567/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午11:15 * 描述: 欢迎页面的view接口，继承自IMVPView，在这里封装一些view的控制方法 */public class IWelcomeActivityView extends IMVPView &#123;&#125; 监听器的命名如果是监听文件的，一般是以On开头，例如：OnGetCityDataListener.java 12345678910/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午11:15 * 描述: 获取城市数据的监听器，通过OnSuccess回调获取成功 */public interface OnGetCityDataListener &#123; void OnSuccess(City city); void OnFail(int errCode, String errMsg);&#125; java变量、方法等的命名成员变量，以m开头123456789101112131415161718/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午11:15 * 描述: app的主页面，继承自BaseAppComPatActivity */public class PDMainActivity extends BaseAppCompatActivity &#123; /** * 成员变量命名以m开头 */ private Context mContext = null; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mContext = this; &#125;&#125; 静态变量，以s开头12345678910111213141516171819202122232425262728/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午11:15 * 描述: app的主页面，继承自BaseAppComPatActivity */public class PDMainActivity extends BaseAppCompatActivity &#123; /** * 成员变量命名以m开头 */ private Context mContext = null; /** * 静态变量命名以s开头 */ private static String sTag = null; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mContext = this; sTag = this.getClass().getSimpleName(); &#125;&#125; 函数方法的命名函数方法的命名一般是多个动词+名词组合，同样使用驼峰式命名，方法名首字母小写，要求命名能够描述出该方法的作用，并且尽可能的给函数方法进行注释说明。 123456789101112131415161718192021222324252627282930313233343536373839/** * 创建人: fangzanpan * 创建时间: 16/8/5 上午10:15 * 描述: 此类封装了关于APP城市相关的数据读取与缓存，使用缓存+服务器获取数据的策略 */public class PDCityDataCenter &#123; private static final String TAG = PDCityDataCenter.class.getSimpleName(); private static PDCityDataCenter mInstance = new PDCityDataCenter(); private static Context mContext = null; public PDCityDataCenter getInstance(Context context) &#123; mContext = context; if (mInstance == null) &#123; mInstance = new PDCityDataCenter(); &#125; return mInstance; &#125; /** * 从缓存中读取选中的城市 * * @return 缓存中选中的城市 */ public City getCityFromCache() &#123; &#125; /** * 从服务器中读取选中的城市 * * @return 服务器返回的城市 */ public City getCityFromServer() &#123; &#125;&#125; 在Android Studio中设置一些规范在编译器里面就可以对一些规则进行配置，酱紫在开发中就能很方便而且很顺手的就用起来了。建议大家都可以设置一下。 设置Java4个空格 图3 设置Java4个空格 设置全局变量和静态变量以m、s开头 图4 设置全局变量和静态变量以m、s开头 资源文件命名规范资源文件命名规范的重要性资源文件命名以小写字母+下划线组成，名字不怕长就怕太简略，要尽可能一眼能看出该资源文件是用来干什么的，我改怎么去找到这个文件？鉴于Android开发肯定会存在很多很多的资源，所以最好能够一个一个模块的放好、并且有明显的命名去命名，方便自己也方便他人在二次开发、bug修复和后续迭代等操作中能够更快的定位到。这个步骤很繁琐，要做好不简单，见微知著，细心耐心！加油吧！！ 其实资源文件的命名很难去做一个比较好而系统的规范，这就要求平时开发的时候开发人员能够自觉地去探索和建立一个比较好的、适合项目发展的开发方式。 123456789101112131415161718192021222324252627282930&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;!-- 1. 在命名的时候，最好能以一个 xxxx start 开头 然后以 xxxx end 结束，表明一个模块的资源文件的区块 2. 同个模块的资源文件，最好能以一个统一的前缀，然后再加以后面的详细描述，这样比较能清晰而且也能减少出现类似资源文件的混淆 3. 尽量多的在名字里表明用处，多点解释能够更好的让其他人明白你的用途，总比别人去猜或者一定要进来看你的资源文件然后去理解好的多吧 --&gt; &lt;!-- 网络错误提示 start --&gt; &lt;string name=\"network_tips_error\"&gt;哎呀，网络有点问题&lt;/string&gt; &lt;string name=\"network_tips_im_error\"&gt;当前网络不可用，请检查你的网络设置&lt;/string&gt; &lt;string name=\"network_tips_unknown_error\"&gt;未知错误&lt;/string&gt; &lt;!-- 网络错误提示 end--&gt; &lt;!-- tabhost栏标题 start --&gt; &lt;string name=\"tabhost_title_home\"&gt;首页&lt;/string&gt; &lt;string name=\"tabhost_title_discovery\"&gt;精选&lt;/string&gt; &lt;string name=\"tabhost_title_appointment\"&gt;预约&lt;/string&gt; &lt;string name=\"tabhost_title_my\"&gt;我的&lt;/string&gt; &lt;!-- tabhost栏标题 end --&gt; &lt;!-- 页面标题 start --&gt; &lt;string name=\"page_title_index\"&gt;首页&lt;/string&gt; &lt;string name=\"page_title_appointment\"&gt;预约&lt;/string&gt; &lt;string name=\"page_title_my_wallet\"&gt;我的钱包&lt;/string&gt; &lt;string name=\"page_title_my_artisan_detail\"&gt;技师详情&lt;/string&gt; &lt;string name=\"page_title_my_product_detail\"&gt;作品详情&lt;/string&gt; &lt;!-- 页面标题 end --&gt;&lt;/resources&gt; 又例如style文件的命名示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;resources&gt; &lt;!-- 1. 如果是有存在父子关系的，可以将这几个样式放在附近一起，并且命名以同样的前缀命名 2. 其他的参考string文件的命名 3. 为什么这里不需要start和end？因为string是单标签的，基本上所有的都是以&lt;string&gt;&lt;/string&gt;来定义，而style文件一个区块已经用&lt;style&gt;&lt;/style&gt;来帮助分区块了，所以可以不用start和end来帮助标记。 --&gt; &lt;!-- 订单确认页的textview样式 --&gt; &lt;style name=\"order_submit_text_style\"&gt; &lt;item name=\"android:layout_width\"&gt;match_parent&lt;/item&gt; &lt;item name=\"android:layout_height\"&gt;48dp&lt;/item&gt; &lt;item name=\"android:textColor\"&gt;@color/Black&lt;/item&gt; &lt;item name=\"android:textSize\"&gt;14sp&lt;/item&gt; &lt;item name=\"android:paddingLeft\"&gt;15dp&lt;/item&gt; &lt;item name=\"android:layout_marginLeft\"&gt;8dp&lt;/item&gt; &lt;item name=\"android:layout_marginRight\"&gt;8dp&lt;/item&gt; &lt;/style&gt; &lt;!-- 全局的分隔线的样式 --&gt; &lt;style name=\"underline_common_view_sytle\"&gt; &lt;item name=\"android:layout_width\"&gt;match_parent&lt;/item&gt; &lt;item name=\"android:layout_height\"&gt;1px&lt;/item&gt; &lt;item name=\"android:layout_marginLeft\"&gt;12dp&lt;/item&gt; &lt;item name=\"android:background\"&gt;@color/Gray_Line&lt;/item&gt; &lt;/style&gt; &lt;!-- 支付页的分割线样式 --&gt; &lt;style name=\"underline_pay_view_style\"&gt; &lt;item name=\"android:layout_width\"&gt;match_parent&lt;/item&gt; &lt;item name=\"android:layout_height\"&gt;1px&lt;/item&gt; &lt;item name=\"android:background\"&gt;@color/Gray_Line&lt;/item&gt; &lt;/style&gt; &lt;!-- 占满横屏的分割线样式 --&gt; &lt;style name=\"underline_match_parent\" parent=\"order_underline_view_sytle\"&gt; &lt;item name=\"android:layout_marginRight\"&gt;0dp&lt;/item&gt; &lt;item name=\"android:layout_marginLeft\"&gt;0dp&lt;/item&gt; &lt;/style&gt; &lt;!-- 支付页的每个栏目的样式 --&gt; &lt;style name=\"pay_bar_style\"&gt; &lt;item name=\"android:layout_width\"&gt;match_parent&lt;/item&gt; &lt;item name=\"android:layout_height\"&gt;44dp&lt;/item&gt; &lt;item name=\"android:background\"&gt;@drawable/listview_item_city_selector&lt;/item&gt; &lt;/style&gt; &lt;!-- 支付页的的样式 --&gt; &lt;style name=\"pay_text_style\"&gt; &lt;item name=\"android:layout_width\"&gt;match_parent&lt;/item&gt; &lt;item name=\"android:layout_height\"&gt;44dp&lt;/item&gt; &lt;item name=\"android:background\"&gt;@color/Black&lt;/item&gt; &lt;/style&gt; &lt;!-- 支付页标题栏的text属性 --&gt; &lt;style name=\"pay_textbar_text_small_style\"&gt; &lt;item name=\"android:layout_width\"&gt;wrap_content&lt;/item&gt; &lt;item name=\"android:layout_height\"&gt;wrap_content&lt;/item&gt; &lt;item name=\"android:textColor\"&gt;@color/theme_color_666666&lt;/item&gt; &lt;item name=\"android:singleLine\"&gt;true&lt;/item&gt; &lt;item name=\"android:layout_centerVertical\"&gt;true&lt;/item&gt; &lt;item name=\"android:textSize\"&gt;12sp&lt;/item&gt; &lt;/style&gt; &lt;!-- 支付页标题栏的text属性 --&gt; &lt;style name=\"pay_textbar_text_small_deep_style\" parent=\"textbar_text_small_style\"&gt; &lt;item name=\"android:textColor\"&gt;@color/theme_color_333333&lt;/item&gt; &lt;item name=\"android:textSize\"&gt;12sp&lt;/item&gt; &lt;/style&gt; &lt;/resources&gt;","categories":[{"name":"Android","slug":"Android","permalink":"http://blog.padakill.com/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.padakill.com/tags/Android/"},{"name":"开发规范","slug":"开发规范","permalink":"http://blog.padakill.com/tags/开发规范/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-09-20T14:31:38.000Z","updated":"2017-09-20T14:31:38.000Z","comments":true,"path":"2017/09/20/hello-world/","link":"","permalink":"http://blog.padakill.com/2017/09/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"杂记","slug":"杂记","permalink":"http://blog.padakill.com/categories/杂记/"}],"tags":[{"name":"hello world","slug":"hello-world","permalink":"http://blog.padakill.com/tags/hello-world/"}]},{"title":"终于搭建好了博客","slug":"终于搭建好了博客","date":"2017-09-20T13:41:54.000Z","updated":"2017-09-20T14:31:35.000Z","comments":true,"path":"2017/09/20/终于搭建好了博客/","link":"","permalink":"http://blog.padakill.com/2017/09/20/终于搭建好了博客/","excerpt":"","text":"庆祝博客开张啦！！心心念念的博客，今天捣鼓了一个下午，终于在今晚 21:43 可以了，现在在试着写第一篇博客，纪念一下吧，进击的 padakill ！ 说起博客，得从2015年底开始了，那时候就想着搭建一个博客，然后开始博客生涯，可惜本人太懒 中毒，最后找到解药由于深中 Android material design 的毒，之前也有看过 MD 设计的博客，所以特别希望自己的博客也能做成 MD 风格。 下午 17:20 ，在公司 从 hexo themes 筛选并一个个的仔细查看样式。一开始使用的是 Material ,但是后面发现这个主题的首页还是有点不太喜欢呢，标题栏也只能是透明的，没法有一个置顶的标题栏。。临近下班，就没继续找了，就先用着吧~~ 晚上 21:39 ，在宿舍 发现了另一个好看的，更加贴近 MD 风格的主题，hexo-theme-indigo，有置顶的导航栏~可以收缩的抽屉~瀑布流~搜索按钮~水波纹！这就是我要的效果啊！马上更换主题~敲板！就是你了！ 写在最后接下来的日子，给今年的自己立 flag ： 好好写博客，无论技术分享，还是心得体会 多做项目，轮子从实践中总结开发出来的 有空多看看 weex 框架，前端大法将一统江湖 有机会还是要造造轮子，让自己经历丰富起来 当然，要阅读完成二十本书","categories":[{"name":"杂记","slug":"杂记","permalink":"http://blog.padakill.com/categories/杂记/"},{"name":"hello world","slug":"杂记/hello-world","permalink":"http://blog.padakill.com/categories/杂记/hello-world/"}],"tags":[{"name":"搭建","slug":"搭建","permalink":"http://blog.padakill.com/tags/搭建/"},{"name":"hexo","slug":"hexo","permalink":"http://blog.padakill.com/tags/hexo/"}]}]}